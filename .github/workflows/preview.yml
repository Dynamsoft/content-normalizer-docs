# This is a basic workflow to help you get started with Actions

name: CI-Preview

# Controls when the workflow will run
on:
  # Triggers the workflow on push events but only for the master branch
  push:
    branches: [ preview ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    #runs-on: self-hosted
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      #- uses: actions/checkout@v2

    - uses: actions/checkout@v2
    - name: Build the site in the jekyll/builder container
      run: |
        cd $GITHUB_WORKSPACE/../
        [ ! -d Docs-Template-Repo ] && git clone --depth 1 --branch preview https://github.com/Dynamsoft/Docs-Template-Repo.git && cp -rfp ./Docs-Template-Repo/* $GITHUB_WORKSPACE
        docker run \
        -v ${{ github.workspace }}:/srv/jekyll -v ${{ github.workspace }}/_site:/srv/jekyll/_site \
        jekyll/builder:latest /bin/bash -c "chmod -R 777 /srv/jekyll && jekyll build --future"
        
        
      # Runs a set of commands using the runners shell
#      - name: Run a multi-line script
#        run: |
#          #cd /home/ubuntu
#          #[ ! -d content-normalizer-docs-preview ] && git clone --depth 1 --branch preview https://github.com/Dynamsoft/content-normalizer-docs.git content-normalizer-docs-preview
#          #[ ! -d DCNDocPreview ] && mkdir -p DCNDocPreview
#          #cd content-normalizer-docs-preview && git pull && cd .. && cp -rfp ./content-normalizer-docs-preview/* ./DCNDocPreview/
#          #cd Docs-Template-Repo && git pull && cd .. && cp -rfp ./Docs-Template-Repo/* ./DCNDocPreview/
#          #cd DCNDocPreview && bundle exec jekyll build --incremental
#          python3 /home/ubuntu/ftp.py /home/ubuntu/DCNDocPreview/_site/ ./www.dynamsoft.com/content-normalizer/ test
          
#      # Runs a set of commands using the runners shell
#      - name: Upload to website
#        run: |
#          function uploaddirectory(){
#              for element in `ls $1`
#              do  
#                  dir_or_file=$1"/"$element
#                  if [ -d $dir_or_file ]
#                  then
#          ftp -p -n $2 $3<<!
#          user $4 $5
#          binary
#          mkdir $dir_or_file
#          close
#          bye
#          !
#                      uploaddirectory $dir_or_file $2 $3 $4 $5
#                  else
#          ftp -p -n $2 $3<<!
#          user $4 $5
#          binary
#          put $dir_or_file
#          close
#          bye
#          !
#                  fi  
#              done
#          }
#          cd /home/ubuntu
#          mkdir -p tempftp/www.dynamsoft.com/content-normalizer/tmp
#          cp -rfp /home/ubuntu/DCNDocPreview/_site/introduction/* /home/ubuntu/tempftp/www.dynamsoft.com/content-normalizer/tmp/
#          cd tempftp
#          uploaddirectory ./ officecn.dynamsoft.com 7500 WebsiteContentManage $user2_pwd
      
      
#      - name: ftp-action
#        # You may pin to the exact commit or the version.
#        # uses: sebastianpopp/ftp-action@eb75c5cb29d23ee4a729720a27dfb66403cb0f6d
#        uses: sebastianpopp/ftp-action@v2.0.0
#        with:
#          # FTP host
#          host: ${{ secrets.FTP_TEST_SITE_SERVER }}
#          # FTP user
#          user: WebsiteContentManage
#          # FTP password
#          password: ${{ secrets.FTP_TEST_SITE_PASSWORD }}
#          # Force SSL encryption
#          #forceSsl: # optional, default is false
#          # Local directory
#          localDir: /home/ubuntu/DCNDocPreview/_site/introduction/
#          # Remote directory
#          remoteDir: /www.dynamsoft.com/content-normalizer/tmp/
                
#      - name: FTP Deploy
#        # You may pin to the exact commit or the version.
#        # uses: SamKirkland/FTP-Deploy-Action@d2724c6194d42ae5d4d042070d51d23cbc6ad83f
#        uses: SamKirkland/FTP-Deploy-Action@4.1.0
#        with:
#          # ftp server
#          server: ${{ secrets.FTP_TEST_SITE_SERVER }}
#          # ftp username
#          username: WebsiteContentManage
#          # ftp password
#          password: ${{ secrets.FTP_TEST_SITE_PASSWORD }}
#          # Server port to connect to (read your web hosts docs)
#          port: 7500
#          # protocol to deploy with - ftp, ftps, or ftps-legacy
#          #protocol: # optional
#          # Folder to upload from, must end with trailing slash /
#          local-dir: /home/ubuntu/DCNDocPreview/_site/introduction/
#          # Path to upload to on the server. Must end with trailing slash /
#          server-dir: /www.dynamsoft.com/content-normalizer/tmp/
#          # Path and name of the state file - this file is used to track which files have been deployed
#          #state-name: # optional
#          # Prints which modifications will be made with current config options, but doesnt actually make any changes
#          #dry-run: # optional
#          # Deletes ALL contents of server-dir, even items in excluded with exclude argument
#          #dangerous-clean-slate: # optional
#          # An array of glob patterns, these files will not be included in the publish/delete process
#          #exclude: # optional
#          # How verbose should the information be - minimal, standard, or verbose
#          #log-level: # optional
#          # strict or loose
#          #security: # optional



    - name: FTP Deployment
      # You may pin to the exact commit or the version.
      # uses: airvzxf/ftp-deployment-action@9efe025c218094bd451a0cb684d7cb471f4d9d4f
      uses: airvzxf/ftp-deployment-action@latest
      with:
        # FTP Server.
        server: ${{ secrets.FTP_TEST_SITE_SERVER }}
        # FTP User.
        user: WebsiteContentManage
        # FTP Password.
        password: ${{ secrets.FTP_TEST_SITE_PASSWORD }}
        # Local directory.
        local_dir: ${{ github.workspace }}/_site/introduction/
        # Remote directory.
        remote_dir: /www.dynamsoft.com/content-normalizer/tmp/
        # Delete all the files inside of the remote directory.
        #delete: # optional, default is false
        # Times that the lftp will be executed if an error occurred.
        #max_retries: # optional, default is 10
        # Do not create symbolic links.
        #no_symlinks: # optional, default is true
        # FTP - Allow SSL encryption.
        #ftp_ssl_allow: # optional, default is false
        # FTP - FEAT: Determining what extended features the FTP server supports.
        #ftp_use_feat: # optional, default is false
        # FTP - Delay in seconds between NOOP commands when downloading tail of a file.
        #ftp_nop_interval: # optional, default is 2
        # NET - Maximum number of operation without success. 0 unlimited. 1 no retries.
        #net_max_retries: # optional, default is 1
        # NET - Ignore hard errors. When reply 5xx errors or there is too many users.
        #net_persist_retries: # optional, default is 5
        # NET - Sets the network protocol timeout.
        #net_timeout: # optional, default is 15s
        # DNS - 0 no limit trying to lookup an address otherwise try only this number of times.
        #dns_max_retries: # optional, default is 8
        # DNS - Time for DNS queries. Set to "never" to disable.
        #dns_fatal_timeout: # optional, default is 10s
